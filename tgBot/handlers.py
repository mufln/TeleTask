#–¥–æ–¥–µ–ª–∞—Ç—å state.set_data
#–¥–æ–¥–µ–ª–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
#–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á

import logging

from aiogram import Router
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import dbWorker
from aiogram.fsm.state import StatesGroup, State
import re
from cfg import DB_PATH
r = Router()
db = dbWorker.dataBaseWorker(DB_PATH)
class Register(StatesGroup): # - step by step registration
    waitingForKey = State()
    waitingForUserName = State()
    waitingForPassword = State()
@r.message(Command("start"))
async def start(msg: types.Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüôÉ")
    await state.set_state(Register.waitingForKey)

@r.message(Register.waitingForKey)
async def verifyKey(message: types.Message, state: FSMContext):
    if not db.verifyOneTimeKey(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üôÑ")
        await state.set_state(Register.waitingForKey)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  "\n–ù–∞–ø—Ä–∏–º–µ—Ä: NaGiBaTor228"
                  "\n–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã"
                  "\n–î–ª–∏–Ω–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤")
    await state.set_state(Register.waitingForUserName)

@r.message(Register.waitingForUserName)
async def setUpUserName(message: types.Message, state: FSMContext):
    if not re.fullmatch(r"[\w\d]{4,64}",message.text):
        await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º‚òπÔ∏è")
        await state.set_state(Register.waitingForUserName)
        return
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—åü§ì")
    await state.set_state(Register.waitingForPassword)

@r.message(Register.waitingForPassword)
async def setUpPassword(message: types.Message, state: FSMContext):
    if not re.fullmatch(r".{8,1024}",message.text):
        await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–πü´°")
        await state.set_state(Register.waitingForPassword)
        return
    data = state.get_data()
    print(data)
    db.addUser()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòé")
