#–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á

import logging
from aiogram import Router,F
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import dbWorker
from aiogram.fsm.state import StatesGroup, State
import re
from cfg import DB_PATH
r = Router()
db = dbWorker.dataBaseWorker(DB_PATH)
logging.basicConfig(level=logging.INFO)
class Register(StatesGroup): # - step by step registration
    waitingForKey = State()
    waitingForUserName = State()
    waitingForPassword = State()

class Login(StatesGroup):
    waitingForLogin = State()
    waitingForPassword = State()
@r.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å, –Ω–∞–ø–∏—à–∏ /login, –∏–Ω–∞—á–µ /registerüòÅ\n—á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏ /cancel")

@r.message(Command("register"))
async def register(message: types.Message, state: FSMContext):
    await state.clear()
    if db.isUserTG(message.chat.id):
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ãüòå")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüôÉ\n–ù–∞–ø–∏—à–∏—Ç–µ /login,–µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å")
    await state.set_state(Register.waitingForKey)
@r.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüóëÔ∏è")
@r.message(Register.waitingForKey)
async def verifyKey(message: types.Message, state: FSMContext):
    if not db.verifyOneTimeKey(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üôÑ")
        return
    await state.update_data(usedKey = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  "\n–ù–∞–ø—Ä–∏–º–µ—Ä: NaGiBaTor228"
                  "\n–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã"
                  "\n–î–ª–∏–Ω–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤")
    await state.set_state(Register.waitingForUserName)

@r.message(Register.waitingForUserName)
async def setUpUserName(message: types.Message, state: FSMContext):
    if not re.fullmatch(r"[\w\d]{4,64}",message.text):
        await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º‚òπÔ∏è")
        return
    await state.update_data(userName = message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—åü§ì")
    await state.set_state(Register.waitingForPassword)

@r.message(Register.waitingForPassword)
async def setUpPassword(message: types.Message, state: FSMContext):
    if not re.fullmatch(r".{8,1024}",message.text):
        await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–πü´°")
        return
    userData = await state.get_data()
    db.delOneTimeKey(userData["usedKey"])
    db.addUser(userData["userName"], message.chat.id, message.text, 0)
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòé")
    await state.clear()

@r.message(Command("login"))
async def login(message: types.Message, state: FSMContext):
    await state.clear()
    if db.isUserTG(message.chat.id):
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
    await state.set_state(Login.waitingForLogin)

@r.message(Login.waitingForLogin)
async def parseLogin(message: types.Message, state: FSMContext):
    if not db.isUserNAME(message.text):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùé\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    await state.update_data(userName = message.text)
    await state.set_state(Login.waitingForPassword)

@r.message(Login.waitingForPassword)
async def parsePassword(message: types.Message, state: FSMContext):
    userData = await state.get_data()
    if not db.checkPassword(userData["userName"],message.text):
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–πü´§")
    db.addTelegramToExisting(message.chat.id,userData["userName"])
    await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüôÉ")
    state.clear()
    return




