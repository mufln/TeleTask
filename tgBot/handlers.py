#–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á

import logging
from aiogram import Router,F
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import dbWorker
from aiogram.fsm.state import StatesGroup, State
import re
from cfg import DB_PATH
import linePreparer
r = Router()
db = dbWorker.dataBaseWorker(DB_PATH)
logging.basicConfig(level=logging.INFO)
class Register(StatesGroup): # - step by step registration
    waitingForKey = State()
    waitingForUserName = State()
    waitingForPassword = State()


class Login(StatesGroup):
    waitingForLogin = State()
    waitingForPassword = State()


class CreateSubject(StatesGroup):
    waitingForSubjectName = State()


class DeleteSubject(StatesGroup):
    waitingForDeletingSubject = State()


class CreateTask(StatesGroup):
    pass


class AddAlias(StatesGroup):
    waitingForSubjectNAlias = State()
    waitingForSubject = State()
    waitingForAlias = State()


@r.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å, –Ω–∞–ø–∏—à–∏ /login, –∏–Ω–∞—á–µ /registerüòÅ\n—á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏ /cancel")


@r.message(Command("register"))
async def register(message: types.Message, state: FSMContext):
    await state.clear()
    if db.isUserTG(message.chat.id):
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ãüòå")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüôÉ\n–ù–∞–ø–∏—à–∏—Ç–µ /login,–µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å")
    await state.set_state(Register.waitingForKey)


@r.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüóëÔ∏è")


@r.message(Register.waitingForKey)
async def verifyKey(message: types.Message, state: FSMContext):
    if not db.verifyOneTimeKey(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üôÑ")
        return
    await state.update_data(usedKey = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  "\n–ù–∞–ø—Ä–∏–º–µ—Ä: NaGiBaTor228"
                  "\n–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã"
                  "\n–î–ª–∏–Ω–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤")
    await state.set_state(Register.waitingForUserName)


@r.message(Register.waitingForUserName)
async def setUpUserName(message: types.Message, state: FSMContext):
    if not re.fullmatch(r"[\w\d]{4,64}",message.text):
        await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º‚òπÔ∏è")
        return
    await state.update_data(userName = message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—åü§ì")
    await state.set_state(Register.waitingForPassword)


@r.message(Register.waitingForPassword)
async def setUpPassword(message: types.Message, state: FSMContext):
    if not re.fullmatch(r".{8,1024}",message.text):
        await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–πü´°")
        return
    userData = await state.get_data()
    db.delOneTimeKey(userData["usedKey"])
    db.addUser(userData["userName"], message.chat.id, message.text, 0)
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòé")
    await state.clear()


@r.message(Command("login"))
async def login(message: types.Message, state: FSMContext):
    await state.clear()
    if db.isUserTG(message.chat.id):
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
    await state.set_state(Login.waitingForLogin)


@r.message(Login.waitingForLogin)
async def parseLogin(message: types.Message, state: FSMContext):
    if not db.isUserNAME(message.text):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùé\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    await state.update_data(userName = message.text)
    await state.set_state(Login.waitingForPassword)


@r.message(Login.waitingForPassword)
async def parsePassword(message: types.Message, state: FSMContext):
    userData = await state.get_data()
    if not db.checkPassword(userData["userName"],message.text):
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–πü´§")
    db.addTelegramToExisting(message.chat.id,userData["userName"])
    await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüôÉ")
    await state.clear()
    return


@r.message(F.text.lower().startswith("–¥–æ–±–∞–≤—å"))
async def addTask(message: types.Message, state: FSMContext):
    if linePreparer.taskIsValid(message.text,db):
        subject,date,description = linePreparer.prepareTask(message.text)
        if linePreparer.subjectExists(subject,db):
            db.addTask(subject,date,description)
            await message.answer(f"–ù–∞ {date} —á–∏—Å–ª–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ {description}")
            return
    await message.answer("–¢—ã –Ω–µ–≤–µ—Ä–Ω–æ –æ–ø–∏—Å–∞–ª –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ñ–æ—Ä–º–∞—Ç:\n–î–æ–±–∞–≤—å (–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞) –Ω–∞ (–¥–∞—Ç–∞ –≤–∏–¥–∞ 00.00) (–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è)")


@r.message(Command("newsub"))
async def addSubject(message: types.Message, state: FSMContext):
    t = message.text
    if len(t.split())==1:
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ü•∏")
        await state.set_state(CreateSubject.waitingForSubjectName)
        return
    else:
        name = linePreparer.prepareSub(t).lower()
        db.addSub(name)
        await message.answer(f"–ü—Ä–µ–¥–º–µ—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ωü•≤")


@r.message(CreateSubject.waitingForSubjectName)
async def addSubjectByName(message: types.Message, state: FSMContext):
    t = message.text.lower()
    db.addSub(t)
    await message.answer(f"–ü—Ä–µ–¥–º–µ—Ç {t} –¥–æ–±–∞–≤–ª–µ–Ωü•≤")
    await state.clear()


@r.message(Command("delsub"))
async def prepToDelSubject(message: types.Message, state: FSMContext):
    subjects = db.getSubjectNamesAndIDs()
    buttons = [[types.InlineKeyboardButton(text = i[1], callback_data=f"DS {i[0]}")] for i in subjects]
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—èü´†",reply_markup=kb)


@r.callback_query(F.data.startswith("DS"))
async def delSubject(data:types.CallbackQuery):
    subject = int(data.data.split()[1])
    db.delSubByID(subject)
    await data.message.edit_text(f"–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–ΩüòÅ",reply_markup=None)


@r.message(Command("deltask"))
async def prepToDelTask(message: types.Message, state: FSMContext):
    tasks = db.getTasks()
    buttons = [[types.InlineKeyboardButton(text = i[1],callback_data=f"DT {i[0]}")] for i in tasks]
    kb = types.InlineKeyboardMarkup(keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",reply_markup=kb)


@r.callback_query(F.data.startswith("DT"))
async def delTask(data: types.CallbackQuery):
    taskID = int(data.message.text.split()[1])
    db.delTask(taskID)
    await data.answer("–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æüòé")


@r.message(Command("listtasks"))
async def displayTasks(message: types.Message, state: FSMContext):
    txt = db.getAllTasksWithSubjects()
    await message.answer("–ó–∞–¥–∞—á–∏:\n"+txt)


@r.message(Command("addalias"))
async def startAddAlias(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º,\n–ò —Å–∞–º —Å–∏–Ω–æ–Ω–∏–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)ü§Ø")
    await state.set_state(AddAlias.waitingForSubjectNAlias)


@r.message(AddAlias.waitingForSubjectNAlias)
async def addAlias(message: types.Message, state: FSMContext):
    subject_name, alias = linePreparer.prepareAlias(message.text)
    print(subject_name, alias)
    reply = db.aliasIsValid(subject_name,alias)
    if reply==0:
        db.addAlias(subject_name,alias)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–∏–Ω–æ–Ω–∏–º {alias} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}")
        await state.clear()
        return
    elif reply==1: await message.answer("–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif reply==2: await message.answer("–¢–∞–∫–æ–π —Å–∏–Ω–æ–Ω–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


